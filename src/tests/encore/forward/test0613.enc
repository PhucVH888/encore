active class Crop
  var v : String
  def init(v : String) : unit
    this.v = v
  end
  def collect() : String
    this.v
  end
end
active class Pepper
  def green(arg : Fut[String]) : String
    (arg ~~> fun(x : String) : unit
                    "jdfdf"
                    forward((new Crop(x)) ! collect())
             end)
    -- forward((new Crop("Never mind")) ! collect())
    "This message should never be appeared when calling method green()"
  end
end
-- active class Pepper
--   def green(arg : Fut[String]) : String
--     get(arg ~~> fun(x : String) : String => fo((new Crop(x)) ! collect()))
--   end
-- end
active class Main
  def main() : unit
    val arg = (new Crop("42")) ! collect()
    val tem = (new Pepper) ! green(arg)
    println("{}", get(tem))
  end
end
-- local class Rock[sharable t]
--   def roll(b : bool, v : t, r : t) : Fut[t]
--     ((new Lazy[t]) ! lazyWork(b, v, r))
--   end
-- end
--
-- active class Worker[t]
--   val v : t
--   def init(v : t) : unit
--     this.v = v
--   end
--   def work() : t
--     this.v
--   end
-- end
--
-- active class Lazy[sharable t]
--   def lazyWork(b : bool, v : t, r : t) : t
--     if b then
--       forward((new Worker[t](v)) ! work())
--     else
--       r
--     end
--     println("This should never run!")
--     r
--   end
-- end
--
-- active class Main
--   def main() : unit
--     val b = false
--     println(get((new Lazy[String]) ! lazyWork(b, "42.0", "100.0")))
--     println(get((new Lazy[real]) ! lazyWork(b, 42.0, 100.0)))
--     println(get((new Lazy[int]) ! lazyWork(b, 42, 100)))
--     println(get((new Lazy[bool]) ! lazyWork(b, true, false)))
--     println(get((new Lazy[Maybe[int]]) ! lazyWork(b, Just(42), Just(100))))
--     -- Tested with passive class
--     println(get((new Rock[int]).roll(b, 42, 100)))
--   end
-- end
